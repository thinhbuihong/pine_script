//@version=5
// Chandelier Exit + VWAP Combination

indicator('Chandelier Exit + VWAP', overlay=true)

// ==== Session Highlight Inputs ====
var string sessionGroup = 'Session Highlight'
sessionStartHour = input.int(12, title='Session Start Hour', minval=0, maxval=23, group=sessionGroup)
sessionStartMinute = input.int(0, title='Session Start Minute', minval=0, maxval=59, group=sessionGroup)
sessionEndHour = input.int(23, title='Session End Hour', minval=0, maxval=23, group=sessionGroup)
sessionEndMinute = input.int(0, title='Session End Minute', minval=0, maxval=59, group=sessionGroup)
sessionColor = input.color(color.new(color.orange, 85), title='Session Background Color', group=sessionGroup)

// ==== Session Highlight Logic ====
var string tz = "GMT+7"  // Đổi lại nếu cần
session_start = timestamp(tz, year, month, dayofmonth, sessionStartHour, sessionStartMinute)
session_end   = timestamp(tz, year, month, dayofmonth, sessionEndHour, sessionEndMinute)
in_session = (time >= session_start and time < session_end)
bgcolor(in_session ? sessionColor : na)

//----------------- --- Chandelier Exit Code -------------------------
filter = input.bool(title='Filter', defval=true)

// --- RSI Filter Settings ---
var string rsiGroup = 'RSI Filter'
useRSIFilter = input.bool(true, title='Enable RSI Filter', group=rsiGroup)
rsiLen = 25
rsiSrc = close
rsiLenFast = 25
rsiLenSlow = 100
up_rsi_fast = ta.rma(math.max(ta.change(rsiSrc), 0), rsiLenFast)
down_rsi_fast = ta.rma(-math.min(ta.change(rsiSrc), 0), rsiLenFast)
rsiFast = down_rsi_fast == 0 ? 100 : up_rsi_fast == 0 ? 0 : 100 - (100 / (1 + up_rsi_fast / down_rsi_fast))
up_rsi_slow = ta.rma(math.max(ta.change(rsiSrc), 0), rsiLenSlow)
down_rsi_slow = ta.rma(-math.min(ta.change(rsiSrc), 0), rsiLenSlow)
rsiSlow = down_rsi_slow == 0 ? 100 : up_rsi_slow == 0 ? 0 : 100 - (100 / (1 + up_rsi_slow / down_rsi_slow))

var string calcGroup = 'Chandelier Exit Settings'
length = input.int(title='ATR Period', defval=1, group=calcGroup)
mult = input.float(title='ATR Multiplier', step=0.1, defval=1.5, group=calcGroup)
useClose = input.bool(title='Use Close Price for Extremums', defval=false, group=calcGroup)

var string visualGroup = 'Chandelier Exit Visuals'
showLabels = input.bool(title='Show Buy/Sell Labels', defval=true, group=visualGroup)
highlightState = input.bool(title='Highlight State', defval=true, group=visualGroup)

var string alertGroup = 'Chandelier Exit Alerts'
awaitBarConfirmation = input.bool(title="Await Bar Confirmation", defval=true, group=alertGroup)

atr = mult * ta.atr(length)

longStop = (useClose ? ta.highest(close, length) : ta.highest(length)) - atr
longStopPrev = nz(longStop[1], longStop)
longStop := close[1] > longStopPrev ? math.max(longStop, longStopPrev) : longStop

shortStop = (useClose ? ta.lowest(close, length) : ta.lowest(length)) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop

var int dir = 1
// 1 buy, -1 sell
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

var color longColor = color.green
var color shortColor = color.red
// var color longFillColor = color.new(color.green, 90)
// var color shortFillColor = color.new(color.red, 90)
var color textColor = color.new(color.white, 0)

// longStopPlot = plot(dir == 1 ? longStop : na, title='Long Stop', style=plot.style_linebr, linewidth=2, color=color.new(longColor, 0))
// Apply RSI filter: previous 2 candles' RSI 25 < RSI 100 for buy, > RSI 100 for sell
buySignal = dir == 1 and dir[1] == -1 and (not useRSIFilter or (rsiFast[1] < rsiSlow[1] and rsiFast[2] < rsiSlow[2]))
sellSignal = dir == -1 and dir[1] == 1 and (not useRSIFilter or (rsiFast[1] > rsiSlow[1] and rsiFast[2] > rsiSlow[2]))

// Khai báo kiểu dữ liệu cho các biến có thể nhận giá trị 'na'
color longStateFillColor = na
color shortStateFillColor = na

bool await = awaitBarConfirmation ? barstate.isconfirmed : true
alertcondition(dir != dir[1] and await, title='Alert: CE Direction Change', message='Chandelier Exit has changed direction!')
alertcondition(buySignal and await, title='Alert: CE Buy', message='Chandelier Exit Buy!')
alertcondition(sellSignal and await, title='Alert: CE Sell', message='Chandelier Exit Sell!')

// ------------------------- VWAP Code --------------------------------

var string vwapGroup = 'VWAP Settings'
hideonDWM = input(false, title="Hide VWAP on 1D or Above", group=vwapGroup)
anchor = input.string(defval="Session", title="Anchor Period", options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group=vwapGroup, display = display.none)
src = input(title="Source", defval=hlc3, group=vwapGroup)
offset = input.int(0, title="Offset", group=vwapGroup)

var string BANDS_GROUP = "Bands Settings"
calcModeInput = input.string("Standard Deviation", "Bands Calculation Mode", options=["Standard Deviation", "Percentage"], group=BANDS_GROUP,display = display.none)
showBand_1 = input(true, title="", group=BANDS_GROUP, inline="band_1")
bandMult_1 = input.float(1.0, title="Bands Multiplier #1", group=BANDS_GROUP, inline="band_1", step=0.5)

if barstate.islast and ta.cum(volume) == 0
    runtime.error("No volume is provided by the data vendor.")

new_earnings = request.earnings(syminfo.tickerid, earnings.actual)
new_dividends = request.dividends(syminfo.tickerid, dividends.gross)
new_split = request.splits(syminfo.tickerid, splits.denominator)

isNewPeriod = switch anchor
    "Earnings"  => not na(new_earnings)
    "Dividends" => not na(new_dividends)
    "Splits"    => not na(new_split)
    "Session"   => timeframe.change("D")
    "Week"      => timeframe.change("W")
    "Month"     => timeframe.change("M")
    "Quarter"   => timeframe.change("3M")
    "Year"      => timeframe.change("12M")
    "Decade"    => timeframe.change("12M") and year % 10 == 0
    "Century"   => timeframe.change("12M") and year % 100 == 0
    => false

// Khai báo kiểu dữ liệu cho các biến có thể nhận giá trị 'na'
float vwapValue = na
float upperBandValue1 = na
float lowerBandValue1 = na
float stdevAbs = na
float bandBasis = na

if not (hideonDWM and timeframe.isdwm)
    [vwapCalc, stdevUpper, _] = ta.vwap(src, isNewPeriod, 1)
    vwapValue := vwapCalc
    stdevAbs := stdevUpper - vwapCalc
    bandBasis := calcModeInput == "Standard Deviation" ? stdevAbs : vwapCalc * 0.01
    upperBandValue1 := vwapCalc + bandBasis * bandMult_1
    lowerBandValue1 := vwapCalc - bandBasis * bandMult_1

plot(vwapValue, title="VWAP", color=color.rgb(217, 217, 28), offset=offset, linewidth = 2, style = plot.style_circles)

plotshape(buySignal and showLabels and (filter == false or close > vwapValue) ? longStop : na,
 title='Buy Label', text='Buy', location=location.belowbar, style=shape.triangleup, size=size.small, 
 color=color.new(longColor, 30), textcolor=textColor)

plotshape(sellSignal and showLabels and (filter == false or close < vwapValue) ? shortStop : na,
 title='Sell Label', text='Sell', location=location.abovebar, style=shape.triangledown, size=size.small,
  color=color.new(shortColor, 30), textcolor=textColor)
